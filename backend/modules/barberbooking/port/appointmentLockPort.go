package barberBookingPort

import (
	"context"
	"time"
	barberBookingModels "myapp/modules/barberbooking/models"
)

type AppointmentLockInput struct {
	TenantID    uint      `json:"tenant_id"`
	BranchID    uint      `json:"branch_id"`
	BarberID    uint      `json:"barber_id"`
	CustomerID  uint      `json:"customer_id"`
	StartTime   time.Time `json:"start_time"`
	EndTime     time.Time `json:"end_time"`
}

type IAppointmentLock interface {
	// üîí ‡∏™‡∏£‡πâ‡∏≤‡∏á lock ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
	CreateAppointmentLock(ctx context.Context, input AppointmentLockInput) (*barberBookingModels.AppointmentLock, error)

	// üßπ ‡∏õ‡∏•‡πà‡∏≠‡∏¢ lock (‡πÄ‡∏ä‡πà‡∏ô ‡∏õ‡∏¥‡∏î modal)
	ReleaseAppointmentLock(ctx context.Context, lockID uint) error

	// ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ slot ‡∏¢‡∏±‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á confirmed ‡πÅ‡∏•‡∏∞ locked)
	IsSlotAvailable(ctx context.Context, tenantID, branchID, barberID uint, start, end time.Time) (bool, error)

	// üì¶ ‡∏î‡∏∂‡∏á lock ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô
	GetAppointmentLocks(ctx context.Context, branchID, barberID uint, date time.Time) ([]barberBookingModels.AppointmentLock, error)

	// ‚è∞ ‡∏•‡πâ‡∏≤‡∏á lock ‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ (‡πÉ‡∏ä‡πâ‡πÉ‡∏ô Cron job)
	CleanupExpiredLocks(ctx context.Context) error
}
