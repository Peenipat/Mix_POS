import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { loginSchema, LoginForm } from "../schemas/authSchema";
import { useNavigate } from "react-router-dom"
import { useEffect} from "react";
import { useAppDispatch, useAppSelector } from '../store/hook';
import { loginUser, clearError } from '@/store/authSlice';
import { useTypewriter } from '../components/useTypewriter';
import { navigateByRole } from "@/utils/navigation";
export default function Login() {
  const dispatch = useAppDispatch();
  // content ‡∏Ç‡∏≠‡∏á animation ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
  const messages = [
    "Lorem ipsum dolor sit amet  accusamus non! Error voluptatibus dignissimos magnam ",
    "Lorem  accusantium et, solutais deleniti harum ex non. Magni, earum. Cupiditate?",
    "Lorem ipsum dolor sit amet consectetur adipisicing elit.  Error voluptCupiditate?",
  ];
  // ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏°‡∏≤‡∏à‡∏≤‡∏Å Redux
  const { status, error, user } = useAppSelector(state => state.auth);
  // ‡∏ï‡∏±‡∏ß‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ check ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÉ‡∏ô form
  const { register, handleSubmit, formState: { errors } } = useForm<LoginForm>({
    resolver: zodResolver(loginSchema),
  });
  const navigate = useNavigate();

  const onSubmit = (data: LoginForm) => {
    dispatch(loginUser(data)); //‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• login ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Redux (loginUser thunk)
  };

  // ‡πÄ‡∏°‡∏∑‡πà‡∏≠ login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (status === 'succeeded') ‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡πá‡∏ö token+navigate
  useEffect(() => {
    if (status === 'succeeded' && user){
      console.log("üöÄ user after login: ", user);
      navigateByRole(user.role, navigate);
      setTimeout(() => {
        navigateByRole(user.role, navigate);
      }, 200);
    }
  }, [status, user, navigate]);

  // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ error ‡πÉ‡∏´‡πâ alert ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏™‡∏î‡∏á UI
  useEffect(() => {
    if (status === 'failed' && error) {
      alert(error);
      dispatch(clearError()); //‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå error ‡πÉ‡∏ô Redux ‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à
    }
  }, [status, error, dispatch]);

  const displayText = useTypewriter(messages) // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ function ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
  return (
    <div className="grid grid-cols-2 min-h-screen mx-auto">
      {/* ‡∏ù‡∏±‡πà‡∏á‡∏ã‡πâ‡∏≤‡∏¢ Login Form*/ }
      <div className="flex items-center justify-center bg-gray-100 px-12">
        <div className="w-full max-w-md">
          <h1 className="text-5xl font-bold mb-8 text-center text-gray-800">Login</h1>

          <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
            <input
              type="email"
              placeholder="example@gmail.com"
              className="input input-bordered w-full"
              {...register("email")}
            />
            {errors.email && (
              <p className="text-sm text-red-500">{errors.email.message}</p>
            )}

            <input
              type="password"
              placeholder="Password"
              className="input input-bordered w-full"
              {...register("password")}
            />
            {errors.password && (
              <p className="text-sm text-red-500">{errors.password.message}</p>
            )}

            <div className="grid grid-cols-2 gap-4 pt-2">
              <button className="btn btn-success w-full rounded-lg" type="submit" disabled={status === 'loading'}>
              {status === 'loading' ? 'Logging in‚Ä¶' : 'Login'}
              </button>
              <button
                className="btn btn-warning w-full rounded-lg"
                type="button"
                onClick={() => navigate("/register")}
              >
                Register
              </button>
            </div>
          </form>
        </div>
      </div>

      {/* ‡∏ù‡∏±‡πà‡∏á‡∏Ç‡∏ß‡∏≤ Image + ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ */}
      <div className="relative overflow-hidden">
        <img
          src="./login_img.jpg"
          alt="Login"
          className="w-full h-full object-cover"
        />
        <div className="absolute bottom-0 left-0 w-full flex justify-center">
          <div className="bg-white/30 backdrop-blur-md w-full  p-3 shadow-inner">
            <h2 className="text-xl font-semibold text-black">{displayText}</h2>
          </div>
        </div>
      </div>
    </div>

  );
}

